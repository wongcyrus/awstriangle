AWSTemplateFormatVersion: 2010-09-09

Description: AWS ELB, CloudWatch and AutoScaling triangle

Parameters:
  AMIId:
     Type: AWS::EC2::Image::Id
     Default: ami-4af5022c
     Description: AMI ID ami-4af5022c (ap-northeast-1)

  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Key Pair

  WebServerInstanceType:
    Description: Web Server EC2 instance type
    Type: String
    Default: t2.nano
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m4.medium
      - m4.large
      - m4.xlarge
      - m4.2xlarge
    ConstraintDescription: must be a valid EC2 instance type.
Resources:
  EC2toS3Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: s3Assess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                  - s3:Put*
                Resource: "*"

  EC2ToS3InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        -
          Ref: EC2toS3Role

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId:
        Ref: ProductionVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  WebLoadALBBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
          Name: web-elb
          Scheme: internet-facing
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups:
              - !Ref LoadBalancerSecurityGroup
          Tags:
              - Key: Name
                Value: web-elb

  WebLoadBalancerListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
          LoadBalancerArn: !Ref WebLoadALBBalancer
          Port: 80
          Protocol: HTTP
          DefaultActions:
              - Type: forward
                TargetGroupArn: !Ref WebTargetGroup

  WebTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
          HealthCheckIntervalSeconds: 10
          HealthCheckProtocol: HTTP
          HealthCheckTimeoutSeconds: 5
          HealthyThresholdCount: 3
          UnhealthyThresholdCount: 6
          HealthCheckPath: /
          Matcher:
            HttpCode: 200
          Name: WebTargets
          VpcId: !Ref ProductionVPC
          Port: 80
          Protocol: HTTP

  ProductionVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value:
            Ref: AWS::StackName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: ProductionVPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Private
      VpcId:
        Ref: ProductionVPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Public
      VpcId:
        Ref: ProductionVPC
  NAT:
    DependsOn: GatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIP
        - AllocationId
      SubnetId:
        Ref: PublicSubnet1
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NAT

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '']
      CidrBlock: 10.0.0.0/27
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Join:
            - '-'
            - - !Ref AWS::StackName
              - !Select [ 0, !GetAZs '']
              - PublicSubnet1
      VpcId: !Ref ProductionVPC
  PublicSubnet1Assoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '']
      CidrBlock: 10.0.1.0/27
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Join:
            - '-'
            - - !Ref AWS::StackName
              - !Select [ 1, !GetAZs '']
              - PublicSubnet2
      VpcId: !Ref ProductionVPC
  PublicSubnet2SubnetAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet2

  WebPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '']
      CidrBlock: 10.0.10.0/24
      Tags:
        - Key: Name
          Value:
            Fn::Join:
            - '-'
            - - !Ref AWS::StackName
              - !Select [ 0, !GetAZs '']
              - WebPrivateSubnet1
      VpcId: {Ref: ProductionVPC}
  WebPrivateSubnet1Assoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: WebPrivateSubnet1

  WebPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '']
      CidrBlock: 10.0.11.0/24
      Tags:
        - Key: Name
          Value:
            Fn::Join:
            - '-'
            - - !Ref AWS::StackName
              - !Select [ 1, !GetAZs '']
              - WebPrivateSubnet2
      VpcId: !Ref ProductionVPC

  WebPrivateSubnet2SubnetAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: WebPrivateSubnet2

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId:
        !Ref ProductionVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId:
          Fn::GetAtt:
          - LoadBalancerSecurityGroup
          - GroupId
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  WebLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AMIId
      IamInstanceProfile: !Ref EC2ToS3InstanceProfile
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      InstanceType: !Ref WebServerInstanceType
      BlockDeviceMappings:
      - DeviceName: /dev/sdk
        Ebs:
          VolumeSize: 10
      UserData:
        Fn::Base64: !Sub |
           #!/bin/bash -xe
            yum install -y  nginx php70-fpm
            instanceId=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            echo "$instanceId" > /usr/share/nginx/html/index.php
            for i in php-fpm nginx; do service $i start; done

  WebServerGroup:
    DependsOn: NAT
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      HealthCheckType: ELB
      HealthCheckGracePeriod: 600
      VPCZoneIdentifier:
       - !Ref WebPrivateSubnet1
       - !Ref WebPrivateSubnet2
      LaunchConfigurationName:
        Ref: WebLaunchConfig
      DesiredCapacity: 2
      MinSize: 2
      MaxSize: 6
      TargetGroupARNs:
        -
          !Ref WebTargetGroup
      MetricsCollection:
        -
          Granularity: 1Minute
          Metrics:
            - GroupMinSize
            - GroupMaxSize
      Tags:
        -
          Key: Name
          Value: web-tier
          PropagateAtLaunch: true

  ScalingPolicy2asgWebpolicyActiveConnectionCountHigh:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName:
        Ref: WebServerGroup
      EstimatedInstanceWarmup: 60
      AdjustmentType: ChangeInCapacity
      PolicyType: StepScaling
      StepAdjustments:
        -
          MetricIntervalLowerBound: 0
          MetricIntervalUpperBound: 30
          ScalingAdjustment: 1
        -
          MetricIntervalLowerBound: 30
          MetricIntervalUpperBound: 60
          ScalingAdjustment: 2
        -
          MetricIntervalLowerBound: 60
          ScalingAdjustment: 3

  CloudWatchWebpolicyActiveConnectionCountHighAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 1
      Dimensions:
        - Name: LoadBalancer
          Value:
            !GetAtt WebLoadALBBalancer.LoadBalancerFullName
        - Name: TargetGroup
          Value:
            !GetAtt WebTargetGroup.TargetGroupFullName
      AlarmActions:
      - Ref: ScalingPolicy2asgWebpolicyActiveConnectionCountHigh
      AlarmDescription: 'Request Count High'
      Namespace: AWS/ApplicationELB
      Period: 60
      ComparisonOperator: GreaterThanThreshold
      Statistic: Sum
      Threshold: 10
      MetricName: RequestCount
  CloudWatchWebpolicyActiveConnectionCountLowAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 2
      Dimensions:
        - Name: LoadBalancer
          Value:
            !GetAtt WebLoadALBBalancer.LoadBalancerFullName
        - Name: TargetGroup
          Value:
            !GetAtt WebTargetGroup.TargetGroupFullName
      AlarmActions:
      - Ref: ScalingPolicy2asgWebpolicyActiveConnectionCountLow
      AlarmDescription: 'Request Count Low'
      Namespace: AWS/ApplicationELB
      Period: 60
      ComparisonOperator: LessThanOrEqualToThreshold
      Statistic: Sum
      Threshold: 10
      MetricName: RequestCount
      InsufficientDataActions:
        - !Ref ScalingPolicy2asgWebpolicyActiveConnectionCountLow
  ScalingPolicy2asgWebpolicyActiveConnectionCountLow:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      ScalingAdjustment: -1
      AutoScalingGroupName:
        Ref: WebServerGroup
      Cooldown: ''
      AdjustmentType: ChangeInCapacity

Outputs:
  WebDnsName:
    Description: ALB DNS Name
    Value: !GetAtt WebLoadALBBalancer.DNSName