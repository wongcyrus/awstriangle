AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Serverless Load Test Bot
Parameters:
    BucketName:
        Type: String
        Default: cf-templates-108zly0brnkmt-us-east-1
Resources:
    LoadTestLex:
        Type: AWS::Serverless::Function
        Properties:
            Handler: loadBot.handler
            Runtime: nodejs6.10
            MemorySize: 128
            Timeout: 30
            Tracing: Active
            Policies:
              - AWSLambdaExecute
              - AWSXrayWriteOnlyAccess
              - Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - lambda:InvokeFunction
                    Resource:
                      Fn::GetAtt:
                        - LoadTest
                        - Arn
            Environment:
              Variables:
                LoadTestFunction: !Ref LoadTest
                SendRequestFunction: !Ref SendRequest
            CodeUri:
                Bucket: !Ref BucketName
                Key: aws-triangle_1-0-0_latest.zip

    LoadTestLexLambdaInvokePermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::GetAtt:
            - LoadTestLex
            - Arn
        Action: lambda:InvokeFunction
        Principal: lex.amazonaws.com
        SourceAccount:
          Ref: AWS::AccountId

    LoadTest:
        Type: AWS::Serverless::Function
        Properties:
            Handler: loadTest.handler
            Runtime: nodejs6.10
            MemorySize: 128
            Timeout: 60
            Tracing: Active
            Policies:
              - AWSLambdaExecute
              - AWSXrayWriteOnlyAccess
              - Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - lambda:InvokeFunction
                    Resource:
                      Fn::GetAtt:
                        - SendRequest
                        - Arn
            Environment:
              Variables:
                SendRequestFunction: !Ref SendRequest
            CodeUri:
                Bucket: !Ref BucketName
                Key: aws-triangle_1-0-0_latest.zip

    SendRequest:
        Type: AWS::Serverless::Function
        Properties:
            Handler: sendRequest.handler
            Runtime: nodejs6.10
            MemorySize: 128
            Timeout: 30
            Tracing: Active
            Policies:
              - AWSLambdaExecute
              - AWSXrayWriteOnlyAccess
              - AmazonKinesisFullAccess
            CodeUri:
                Bucket: !Ref BucketName
                Key: aws-triangle_1-0-0_latest.zip
            Environment:
              Variables:
                EC2ResponseStream: !Ref EC2ResponseStream

    EC2ResponseStream:
      Type: AWS::Kinesis::Stream
      Properties:
        RetentionPeriodHours: 24
        ShardCount: 1

    BasicApplication:
      Type: AWS::KinesisAnalytics::Application
      Properties:
        ApplicationName: "ALBApplication"
        ApplicationDescription: "ALBApp"
        ApplicationCode: !Sub |
          -- ** Aggregate (COUNT, AVG, etc.) + Tumbling Time Window **
          -- Performs function on the aggregate rows over a 10 second tumbling window for a specified column.
          --          .----------.   .----------.   .----------.
          --          |  SOURCE  |   |  INSERT  |   |  DESTIN. |
          -- Source-->|  STREAM  |-->| & SELECT |-->|  STREAM  |-->Destination
          --          |          |   |  (PUMP)  |   |          |
          --          '----------'   '----------'   '----------'
          -- STREAM (in-application): a continuously updated entity that you can SELECT from and INSERT into like a TABLE
          -- PUMP: an entity used to continuously 'SELECT ... FROM' a source STREAM, and INSERT SQL results into an output STREAM
          -- Create output stream, which can be used to send to a destination
          CREATE OR REPLACE STREAM "DESTINATION_SQL_STREAM" ("instanceId" VARCHAR(64), request_count INTEGER);
          -- Create a pump which continuously selects from a source stream (SOURCE_SQL_STREAM_001)
          -- performs an aggregate count that is grouped by columns ticker over a 10-second tumbling window
          -- and inserts into output stream (DESTINATION_SQL_STREAM)
          CREATE OR REPLACE  PUMP "STREAM_PUMP" AS INSERT INTO "DESTINATION_SQL_STREAM"
          -- Aggregate function COUNT|AVG|MAX|MIN|SUM|STDDEV_POP|STDDEV_SAMP|VAR_POP|VAR_SAMP)
          SELECT STREAM "instanceId", COUNT(*) AS request_count
          FROM "SOURCE_SQL_STREAM_001"
          -- Uses a 10-second tumbling time window
          GROUP BY "instanceId", FLOOR(("SOURCE_SQL_STREAM_001".ROWTIME - TIMESTAMP '1970-01-01 00:00:00') SECOND / 10 TO SECOND);
        Inputs:
          - NamePrefix: "SOURCE_SQL_STREAM"
            InputSchema:
              RecordColumns:
               - Name: "awsRequestId"
                 SqlType: "VARCHAR(64)"
                 Mapping: "$.awsRequestId"
               - Name: "instanceId"
                 SqlType: "VARCHAR(64)"
                 Mapping: "$.instanceId"
               - Name: "startTime"
                 SqlType: "TIMESTAMP"
                 Mapping: "$.startTime"
               - Name: "completeTime"
                 SqlType: "TIMESTAMP"
                 Mapping: "$.completeTime"
              RecordFormat:
                RecordFormatType: "JSON"
                MappingParameters:
                  JSONMappingParameters:
                    RecordRowPath: "$"
            KinesisStreamsInput:
              ResourceARN: !GetAtt EC2ResponseStream.Arn
              RoleARN: !GetAtt KinesisAnalyticsRole.Arn

    KinesisAnalyticsRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service: kinesisanalytics.amazonaws.com
              Action: sts:AssumeRole
        Path: /
        Policies:
          - PolicyName: Open
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action: "*"
                  Resource: "*"

    BasicApplicationOutputs:
      Type: "AWS::KinesisAnalytics::ApplicationOutput"
      DependsOn: BasicApplication
      Properties:
        ApplicationName: !Ref BasicApplication
        Output:
          Name: "DESTINATION_SQL_STREAM"
          DestinationSchema:
            RecordFormatType: "CSV"
          KinesisStreamsOutput:
            ResourceARN: !GetAtt OutputKinesisStream.Arn
            RoleARN: !GetAtt KinesisAnalyticsRole.Arn

    OutputKinesisStream:
      Type: "AWS::Kinesis::Stream"
      Properties:
        ShardCount: 1

    deliverystream:
      DependsOn:
        - deliveryPolicy
      Type: 'AWS::KinesisFirehose::DeliveryStream'
      Properties:
        ExtendedS3DestinationConfiguration:
          BucketARN: !Join
            - ''
            - - 'arn:aws:s3:::'
              - !Ref s3bucket
          BufferingHints:
            IntervalInSeconds: '60'
            SizeInMBs: '50'
          CompressionFormat: UNCOMPRESSED
          Prefix: firehose/
          RoleARN: !GetAtt
            - deliveryRole
            - Arn

    s3bucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        VersioningConfiguration:
          Status: Enabled

    deliveryRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Sid: ''
              Effect: Allow
              Principal:
                Service: firehose.amazonaws.com
              Action: 'sts:AssumeRole'
              Condition:
                StringEquals:
                  'sts:ExternalId': !Ref 'AWS::AccountId'
    deliveryPolicy:
      Type: 'AWS::IAM::Policy'
      Properties:
        PolicyName: firehose_delivery_policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - 's3:AbortMultipartUpload'
                - 's3:GetBucketLocation'
                - 's3:GetObject'
                - 's3:ListBucket'
                - 's3:ListBucketMultipartUploads'
                - 's3:PutObject'
              Resource:
                - !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref s3bucket
                - !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref s3bucket
                    - '*'
        Roles:
          - !Ref deliveryRole
